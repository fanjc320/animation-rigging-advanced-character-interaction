//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Config/MyControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyControls"",
    ""maps"": [
        {
            ""name"": ""First action map"",
            ""id"": ""7de394d7-7701-4d72-a4c0-4cd2d3857294"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b5615258-80f3-4fb1-aeaf-71687792ffc9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fight"",
                    ""type"": ""Value"",
                    ""id"": ""7ebf0ad1-e56d-4db4-b9bf-b8cbf463a47a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3c8482f-8da2-4ecb-9636-c2490cbd19f2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""testScheme;sendMsg"",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a0aac45-bf6e-463a-8930-fe11a9ec9330"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""sendMsg;testScheme"",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e35d9f07-a3ac-4d53-aeda-20e10d1c8187"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""testScheme"",
                    ""action"": ""Fight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""b4bd015e-8fd1-4207-b057-41e41191f265"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""08cb5331-becc-4038-b43d-f045d6e1d3d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d7478779-39d3-4b89-912a-16f918ae7838"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4ba018a8-5eba-4938-b6a8-f6860e50c6fa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bdaef6b5-0bad-42f7-b86b-3314fabe9a83"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e4b7c771-8447-4bb7-bb35-277b20938178"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ece171e2-6391-41fc-b0ac-f9670927534c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""testScheme"",
            ""bindingGroup"": ""testScheme"",
            ""devices"": []
        },
        {
            ""name"": ""sendMsg"",
            ""bindingGroup"": ""sendMsg"",
            ""devices"": []
        }
    ]
}");
        // First action map
        m_Firstactionmap = asset.FindActionMap("First action map", throwIfNotFound: true);
        m_Firstactionmap_Space = m_Firstactionmap.FindAction("Space", throwIfNotFound: true);
        m_Firstactionmap_Fight = m_Firstactionmap.FindAction("Fight", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // First action map
    private readonly InputActionMap m_Firstactionmap;
    private List<IFirstactionmapActions> m_FirstactionmapActionsCallbackInterfaces = new List<IFirstactionmapActions>();
    private readonly InputAction m_Firstactionmap_Space;
    private readonly InputAction m_Firstactionmap_Fight;
    public struct FirstactionmapActions
    {
        private @MyControls m_Wrapper;
        public FirstactionmapActions(@MyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_Firstactionmap_Space;
        public InputAction @Fight => m_Wrapper.m_Firstactionmap_Fight;
        public InputActionMap Get() { return m_Wrapper.m_Firstactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstactionmapActions set) { return set.Get(); }
        public void AddCallbacks(IFirstactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstactionmapActionsCallbackInterfaces.Add(instance);
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
            @Fight.started += instance.OnFight;
            @Fight.performed += instance.OnFight;
            @Fight.canceled += instance.OnFight;
        }

        private void UnregisterCallbacks(IFirstactionmapActions instance)
        {
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
            @Fight.started -= instance.OnFight;
            @Fight.performed -= instance.OnFight;
            @Fight.canceled -= instance.OnFight;
        }

        public void RemoveCallbacks(IFirstactionmapActions instance)
        {
            if (m_Wrapper.m_FirstactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstactionmapActions @Firstactionmap => new FirstactionmapActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    public struct PlayerActions
    {
        private @MyControls m_Wrapper;
        public PlayerActions(@MyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_testSchemeSchemeIndex = -1;
    public InputControlScheme testSchemeScheme
    {
        get
        {
            if (m_testSchemeSchemeIndex == -1) m_testSchemeSchemeIndex = asset.FindControlSchemeIndex("testScheme");
            return asset.controlSchemes[m_testSchemeSchemeIndex];
        }
    }
    private int m_sendMsgSchemeIndex = -1;
    public InputControlScheme sendMsgScheme
    {
        get
        {
            if (m_sendMsgSchemeIndex == -1) m_sendMsgSchemeIndex = asset.FindControlSchemeIndex("sendMsg");
            return asset.controlSchemes[m_sendMsgSchemeIndex];
        }
    }
    public interface IFirstactionmapActions
    {
        void OnSpace(InputAction.CallbackContext context);
        void OnFight(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
